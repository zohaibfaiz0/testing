// src/app/layout.tsx
'use client'

import localFont from "next/font/local";
import { SessionProvider, useSession } from "next-auth/react";
import "./globals.css";
import HeaderTop from "@/components/HeaderTop";
import HeaderMain from "@/components/HeaderMain";
import Navbar from "@/components/Navbar";
import { CartProvider } from '@/contexts/CartContext';
import LoginPage from './login/page';
import Metadata from '@/components/metadata';
import { usePathname } from 'next/navigation';
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

const title = "Create Next App";
const description = "Generated by create next app";

// Load your Stripe public key
const stripePromise = loadStripe('YOUR_PUBLIC_STRIPE_KEY'); // Replace with your actual public key

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <Metadata title={title} description={description} />
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <SessionProvider>
          <CartProvider>
            <AuthWrapper>
              <HeaderTop />
              <HeaderMain />
              <Navbar />
              <Elements stripe={stripePromise}>
                {children} {/* Wrap children with Elements provider */}
              </Elements>
            </AuthWrapper>
          </CartProvider>
        </SessionProvider>
      </body>
    </html>
  );
}

function AuthWrapper({ children }: { children: React.ReactNode }) {
  const { data: session, status } = useSession();
  const pathname = usePathname();

  // Allow access to login, register, and other public routes
  const publicRoutes = ['/login', '/register', '/about', '/contact'];
  const isPublicRoute = publicRoutes.includes(pathname);

  if (status === 'loading') {
    return <div>Loading...</div>
  }

  if (!session && !isPublicRoute) {
    return <LoginPage />
  }

  return (
    <>
      {children}
    </>
  )
}